// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// init
void init(std::string dict_path);
RcppExport SEXP hyphenatr_init(SEXP dict_pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dict_path(dict_pathSEXP);
    init(dict_path);
    return R_NilValue;
END_RCPP
}
// cleanup
void cleanup();
RcppExport SEXP hyphenatr_cleanup() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cleanup();
    return R_NilValue;
END_RCPP
}
// hyphendict_is_loaded
LogicalVector hyphendict_is_loaded();
RcppExport SEXP hyphenatr_hyphendict_is_loaded() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(hyphendict_is_loaded());
    return rcpp_result_gen;
END_RCPP
}
// hyphenate
std::vector < std::string > hyphenate(std::vector < std::string > words);
RcppExport SEXP hyphenatr_hyphenate(SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(hyphenate(words));
    return rcpp_result_gen;
END_RCPP
}
